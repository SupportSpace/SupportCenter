<?xml version="1.0" ?>

<project name="Relay" default="build">

  <include buildfile="..\Deploy\settings.include" />

  <target name="setup_environment">
    <property name="roots.dir" value="${environment::get-variable('ROOTS')}" />
    <if test="${property::exists('configuration')}">
      <setenv>
        <variable name="CONFIGURATION" value="${configuration}" />
      </setenv>
    </if>
    <if test="${not property::exists('configuration')}">
      <property name="configuration" value="${environment::get-variable('CONFIGURATION')}" />
    </if>
    <property name="install.dir" value="${roots.dir}\console_${configuration}" />
    <property name="public.dir" value="public" />
    <property name="output.dir" value=".\out" />
    <property name="project.name" value="relay" />
    <property name="project.exclude" value="RELAY_EXCLUDE_${configuration}" />
    <property name="test.exclude" value="RELAY_TEST_EXCLUDE_${configuration}" />
    <property name="test.bin.path" value="TESTBINPATH_${configuration}" />
    <if test="${not property::exists('failontesterror')}">
      <property name="failontesterror" value="true" />
    </if>

    <!-- external executables -->
    <property name="plink.bin" value="plink.exe" />
    <property name="psftp.bin" value="psftp.exe" />
    <!-- temporary files -->
    <property name="sftp.download.file.name" value="sftp.download" />
    <property name="sftp.download.file" value="${output.dir}\${sftp.download.file.name}" />
    <property name="remote.build.file.name" value="build.remote" />
    <property name="remote.build.file" value="${output.dir}\${remote.build.file.name}" />
  </target>

  <!-- creates temporary file with build script -->
  <target name="build_script">
    <mkdir dir="${output.dir}" if="${not directory::exists(output.dir)}" />
    <echo message="#!/bin/bash" file="${remote.build.file}" />
    <echo message="build_root=${remote.build.dir}" file="${remote.build.file}" append="true" />
    <echo message="sftp_dir=${remote.sftp.dir}" file="${remote.build.file}" append="true" />
    <echo message="last_build_dir=last_build" file="${remote.build.file}" append="true" />
    <echo message="cd $build_root" file="${remote.build.file}" append="true" />
    <echo message="svn update" file="${remote.build.file}" append="true" />
    <echo message="cd ./NetworkLayer/relayd/src" file="${remote.build.file}" append="true" />
    <echo message="export RELAY_BUILD_TIME=`date +&quot;%Y-%m-%d--%H-%M-%S&quot;`" file="${remote.build.file}" append="true" />
    <echo message="make rpm ${remote.build.params} &amp;>$RELAY_BUILD_TIME.log" file="${remote.build.file}" append="true" />
    <echo message="if ! [ -d $sftp_dir/$RELAY_BUILD_TIME ]; then" file="${remote.build.file}" append="true" />
    <echo message="mkdir $sftp_dir/$RELAY_BUILD_TIME" file="${remote.build.file}" append="true" />
    <echo message="fi" file="${remote.build.file}" append="true" />
    <echo message="cp -f *.rpm $sftp_dir/$RELAY_BUILD_TIME" file="${remote.build.file}" append="true" />
    <echo message="cp $RELAY_BUILD_TIME.log $sftp_dir/$RELAY_BUILD_TIME" file="${remote.build.file}" append="true" />
    <echo message="if [ -L $sftp_dir/$last_build_dir ]; then" file="${remote.build.file}" append="true" />
    <echo message="rm -f $sftp_dir/$last_build_dir" file="${remote.build.file}" append="true" />
    <echo message="fi" file="${remote.build.file}" append="true" />
    <echo message="rm -f $RELAY_BUILD_TIME.log" file="${remote.build.file}" append="true" />
    <echo message="cd $sftp_dir" file="${remote.build.file}" append="true" />
    <echo message="ln -s ./$RELAY_BUILD_TIME ./$last_build_dir" file="${remote.build.file}" append="true" />
    <echo message="echo Build completed" file="${remote.build.file}" append="true" />
    <echo message="exit" file="${remote.build.file}" append="true" />
  </target>

  <!-- creates temporary file with download script -->
  <target name="download_script">
    <mkdir dir="${output.dir}" if="${not directory::exists(output.dir)}" />
    <echo message="cd ${sftp.dir}" file="${sftp.download.file}" append="true" />
    <echo message="mget *.rpm" file="${sftp.download.file}" append="true" />
    <echo message="mget *.log" file="${sftp.download.file}" append="true" />
    <echo message="bye" file="${sftp.download.file}" append="true" />
  </target>

  <!-- Removing public files and binary files from roots direcory -->
  <target name="clean_installed" depends="setup_environment">
    <delete dir="${install.dir}\rpm" if="${directory::exists(install.dir+'\rpm')}" />
  </target>

  <!-- Removing intermediate files from output direcory -->
  <target name="clean_intermediate" depends="setup_environment">
    <delete>
      <fileset basedir="${output.dir}">
        <include name="*.rpm" />
        <include name="*.log" />
        <include name="${sftp.download.file.name}" />
        <include name="${remote.build.file.name}" />
      </fileset>
    </delete>
  </target>

  <!-- Copying public files to roots directory -->
  <target name="copy_public" depends="setup_environment" />

  <!-- Copying binary files from output directory to roots directory -->
  <target name="copy_binaries" depends="setup_environment">
    <!-- Copying rpm files -->
    <mkdir dir="${install.dir}\rpm" />
    <copy todir="${install.dir}\rpm" overwrite="true" >
      <fileset basedir="${output.dir}">
        <include name="*.rpm" />
        <include name="*.log" />
      </fileset>
    </copy>
  </target>

  <!-- Building dependent projects -->
  <target name="build_dependent" />

  <!-- Building unit tests -->
  <target name="build_utests" />

  <!-- Building functional tests -->
  <target name="build_ftests" />

  <!-- Running unit and functional tests -->
  <target name="run_tests" depends="setup_environment" if="${not environment::variable-exists(test.exclude)}" >
    <property name="build.target" value="run_tests" />
    <call target="build_dependent" failonerror="${failontesterror}" />
    <setenv if="${not environment::variable-exists(test.bin.path)}" >
      <variable name="PATH" value="${install.dir}\bin;%PATH%" />
      <variable name="${test.bin.path}" value="1" />
    </setenv>

    <!--
    <exec program="UTestAidLib.exe" basedir="${install.dir}\utest\AidLib" workingdir="${install.dir}\bin" />
    -->

    <setenv>
      <variable name="${test.exclude}" value="1" />
    </setenv>
  </target>
  
  <!-- Cleaning project -->
  <target name="clean" depends="clean_installed, clean_intermediate" />

  <!-- Installing project -->
  <target name="install" depends="clean_installed, copy_public, copy_binaries" />

  <!-- Building project and tests -->
  <target name="build_all" depends="setup_environment" if="${not environment::variable-exists(project.exclude)}" >
    <call target="clean_installed" />
    <call target="copy_public" />
    <property name="build.target" value="build_all" />
    <call target="build_dependent" />
    <call target="compile" />
    <call target="copy_binaries" />
    <setenv>
      <variable name="${project.exclude}" value="1" />
    </setenv>
    <call target="build_utests" />
    <call target="build_ftests" />
  </target>

  <!-- Building project -->
  <target name="build" depends="setup_environment" if="${not environment::variable-exists(project.exclude)}" >
    <call target="clean_installed" />
    <call target="copy_public" />
    <property name="build.target" value="build" />
    <call target="build_dependent" />
    <call target="compile" />
    <call target="copy_binaries" />
    <setenv>
      <variable name="${project.exclude}" value="1" />
    </setenv>
  </target>

  <!-- Building project without dependent projects -->
  <target name="build_shallow" depends="clean_installed, copy_public, compile, copy_binaries" />

  <!-- Compiling project -->
  <target name="compile" depends="setup_environment, clean_intermediate, build_script, download_script">
    <setenv>
      <variable name="BUILDRCEFROMSCRIPT" value="1" />
    </setenv>
    <exec program="${plink.bin}" commandline="${ssh.host} -ssh -l ${ssh.user} -pw ${ssh.passwd} -m &quot;${remote.build.file}&quot;" />
    <exec program="${psftp.bin}" workingdir="${output.dir}" commandline=" -b ${sftp.download.file.name} -l ${sftp.user} -pw ${sftp.passwd} ${sftp.server}" />
  </target>

</project>
