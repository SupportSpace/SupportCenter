<?xml version="1.0" ?>

<project name="Diagnostics" default="build_all">


  <!-- Additional targers -->

  <!-- Setup environment variables -->
  <target name="setup_environment">
    <property name="roots.dir" value="${environment::get-variable('ROOTS')}" />
    <if test="${property::exists('configuration')}">
      <setenv>
        <variable name="CONFIGURATION" value="${configuration}" />
      </setenv>
    </if>
    <if test="${not property::exists('configuration')}">
      <property name="configuration" value="${environment::get-variable('CONFIGURATION')}" />
    </if>
    <property name="install.dir" value="${roots.dir}\console_${configuration}" />
    <property name="public.dir" value="public" />
    <property name="output.bin.dir" value=".\out\${configuration}" />
    <property name="output.obj.dir" value="out\obj\${configuration}" />
    <property name="project.name" value="Diagnostics" />
    <property name="project.exclude" value="Diagnostics_EXCLUDE_${configuration}" />
    <property name="test.exclude" value="Diagnostics_TEST_EXCLUDE_${configuration}" />
    <property name="test.bin.path" value="TESTBINPATH_${configuration}" />
    <if test="${not property::exists('failontesterror')}">
      <property name="failontesterror" value="true" />
    </if>
    <if test="${not environment::variable-exists('SIGNTOOLPATH')}" >
      <property name="vscomm" value="${environment::get-variable('VS80COMNTOOLS')}" />
      <property name="vscomm.bin" value="${vscomm}\bin" />
      <setenv>
        <variable name="PATH" value="${vscomm.bin};%PATH%" />
        <variable name="SIGNTOOLPATH" value="1" />
      </setenv>
    </if>
    <property name="pkzip.bin" value="../pkzip25.exe" />
    <property name="zip.passwd" value="ScriptEngine" />
  </target>

  <!-- Removing public files and binary files from roots direcory -->
  <target name="clean_installed" depends="setup_environment">
  <!-- Removing lib, pdb, dll files from roots -->
    <delete if="${file::exists(install.dir+'\bin\scripts\'+project.name+'.zip')}">
      <fileset>
        <include name="${install.dir}\bin\scripts\${project.name}.zip"/>
      </fileset>
    </delete>
  </target>

  <!-- Removing intermediate files from output direcory -->
  <target name="clean_intermediate" depends="setup_environment">
    <delete if="${directory::exists(output.bin.dir)}">
      <fileset>
        <include name="${output.bin.dir}\**\*"/>
      </fileset>
    </delete>
  </target>

  <!-- Copying public files to roots directory -->
  <target name="copy_public" />

  <!-- Copying binary files from output directory to roots directory -->
  <target name="copy_binaries" depends="setup_environment">
    <mkdir dir="${install.dir}\bin\scripts" />
    <copy todir="${install.dir}\bin\scripts" overwrite="true" >
      <fileset basedir="${output.bin.dir}">
        <include name="${project.name}.zip" />
      </fileset>
    </copy>
  </target>

  <!-- Building dependent projects -->
  <target name="build_dependent" >
    <nant target="${build.target}">
      <buildfiles>
      </buildfiles>
    </nant>
  </target>

  <!-- Building unit tests -->
  <target name="build_utests" />

  <!-- Building functional tests -->
  <target name="build_ftests" />

  <!-- Running unit and functional tests -->
  <target name="run_tests" depends="setup_environment" if="${not environment::variable-exists(test.exclude)}" />


  <!-- Main targers -->

  <!-- Cleaning project -->
  <target name="clean" depends="clean_installed, clean_intermediate" />

  <!-- Installing project -->
  <target name="install" depends="clean_installed, copy_public, copy_binaries" />

  <!-- Building project and tests -->
  <target name="build_all" depends="setup_environment" if="${not environment::variable-exists(project.exclude)}" >
    <call target="clean_installed" />
    <call target="copy_public" />
    <property name="build.target" value="build_all" />
    <call target="build_dependent" />
    <call target="compile" />
    <call target="copy_binaries" />
    <setenv>
      <variable name="${project.exclude}" value="1" />
    </setenv>
    <call target="build_utests" />
    <call target="build_ftests" />
  </target>

  <!-- Building project -->
  <target name="build" depends="setup_environment" if="${not environment::variable-exists(project.exclude)}" >
    <call target="clean_installed" />
    <call target="copy_public" />
    <property name="build.target" value="build" />
    <call target="build_dependent" />
    <call target="compile" />
    <call target="copy_binaries" />
    <setenv>
      <variable name="${project.exclude}" value="1" />
    </setenv>
  </target>

  <!-- Building project without dependent projects -->
  <target name="build_shallow" depends="clean_installed, copy_public, compile, copy_binaries" />

  <!-- Compiling project -->
  <target name="compile" depends="setup_environment, clean_intermediate">
    <mkdir dir="${output.bin.dir}/${project.name}" if="${not directory::exists(output.bin.dir+'/'+project.name)}"/>
    <copy todir="${output.bin.dir}/${project.name}" overwrite="true" >
      <fileset basedir="./src">
        <include name="Local/**/*" />
        <include name="Remote/**/*" />
      </fileset>
    </copy>
    <exec program="${pkzip.bin}" workingdir="${output.bin.dir}" commandline="-add -pass=${zip.passwd} -lev=9 -dir=current ${project.name} ${project.name}\*.*" />
  </target>

  <!-- Targers for Visual Studio -->
  <target name="prebuild" if="${not environment::variable-exists('BUILDRCEFROMSCRIPT')}">
    <setenv>
      <variable name="BUILDRCEFROMVS" value="1" />
    </setenv>
    <call target="clean_installed" />
    <call target="copy_public" />
  </target>
  <target name="postbuild" if="${not environment::variable-exists('BUILDRCEFROMSCRIPT')}">
    <call target="copy_binaries" />
  </target>

</project>
