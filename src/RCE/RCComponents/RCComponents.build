<?xml version="1.0" ?>

<project name="RCComponents" default="build_all">

	<!-- Additional targers -->
	<!-- read vc path -->
	<target name="read_vc_dir">
		<!-- Getting VC path-->
		<readregistry property="vcide.dir" key="Software\MicroSoft\VisualStudio\8.0\InstallDir" hive="LocalMachine CurrentUser" failonerror="true" />
		<property name="vc.dir" value="${path::get-directory-name(path::get-directory-name(path::get-directory-name(vcide.dir))) + '\VC'}" />
	</target>

	<!-- Setup environment variables -->
	<target name="setup_environment">
		<property name="roots.dir" value="${environment::get-variable('ROOTS')}" />
		<if test="${property::exists('configuration')}">
			<setenv>
				<variable name="CONFIGURATION" value="${configuration}" />
			</setenv>
		</if>
		<if test="${not property::exists('configuration')}">
			<property name="configuration" value="${environment::get-variable('CONFIGURATION')}" />
		</if>
		<property name="install.dir" value="${roots.dir}\console_${configuration}" />
		<property name="public.dir" value="public" />
		<property name="output.bin.dir" value="out\bin\${configuration}" />
		<property name="output.obj.dir" value="out\obj\${configuration}" />
		<property name="project.name" value="RCComponents" />
		<property name="project.exclude" value="RCCOMPONENTS_EXCLUDE_${configuration}" />
		<property name="test.exclude" value="RCCOMPONENTS_TEST_EXCLUDE_${configuration}" />
		<property name="test.bin.path" value="TESTBINPATH_${configuration}" />
		<if test="${not property::exists('failontesterror')}">
			<property name="failontesterror" value="true" />
		</if>
		<call target="read_vc_dir"/>
		<if test="${not environment::variable-exists('VC80PATH')}">
			<setenv>
				<variable name="VC80PATH" value="${vc.dir+'\redist\x86'}" />
			</setenv>
			<!-- <echo message="${environment::get-variable('VC80PATH')}"/> -->
		</if>
		<if test="${not environment::variable-exists('VC80DPATH')}">
			<setenv>
				<variable name="VC80DPATH" value="${vc.dir+'\redist\Debug_NonRedist\x86'}" />
			</setenv>
		</if>
		<if test="${not environment::variable-exists('SIGNTOOLPATH')}" >
			<property name="vscomm" value="${environment::get-variable('VS80COMNTOOLS')}" />
			<property name="vscomm.bin" value="${vscomm}\bin" />
			<setenv>
				<variable name="PATH" value="${vscomm.bin};%PATH%" />
				<variable name="SIGNTOOLPATH" value="1" />
			</setenv>
		</if>
	</target>

	<!-- Removing public files and binary files from roots direcory -->
	<target name="clean_installed" depends="setup_environment">
    <if test="${not environment::variable-exists('BUILDRCEFROMVS')}">
      <delete if="${directory::exists(install.dir+'\install')}" >
        <fileset>
          <include name="${install.dir}\install\SupportSpace_Platform_Setup.exe"/>
          <include name="${install.dir}\install\SupportSpaceExpertSupportTools.msi"/>
        </fileset>
      </delete>
    </if>
	</target>

	<!-- Removing intermediate files from output direcory -->
	<target name="clean_intermediate" depends="setup_environment">
		<delete dir="${output.bin.dir}" if="${directory::exists(output.bin.dir)}" />
		<delete dir="${output.obj.dir}" if="${directory::exists(output.obj.dir)}" />
	</target>

	<!-- Copying public files to roots directory -->
	<target name="copy_public" depends="setup_environment" />

	<!-- Copying binary files from output directory to roots directory -->
	<target name="copy_binaries" depends="setup_environment">
		<!-- Signing files -->
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${output.bin.dir}\*.cab" />
					<include name="${output.bin.dir}\*.msi" />
				</items>
			</in>
			<do>
				<if test="${environment::variable-exists('SS_PFX_PATH')}">
					<property name="ss_pfx_path" value="${environment::get-variable('SS_PFX_PATH')}" />
					<exec program="signtool" commandline="${'sign /t http://timestamp.verisign.com/scripts/timstamp.dll /f '+ss_pfx_path+'\SupportSpace.pfx  '+filename}" />
				</if>
				<if test="${not environment::variable-exists('SS_PFX_PATH')}">
					<exec program="signtool" commandline="sign /f .\..\..\etc\SupportSpace.pfx -p SupportSpace ${filename}" />
				</if>
			</do>
		</foreach>
		<!-- bootstrapper for expert installation package -->
		<!-- output file name -->
		<property name="ss_expert_filename" value="SupportSpace_Platform_Setup.exe"/>
		<!-- base URL (msi file location) -->
		<if test="${property::exists('rccomponents.baseurl') and property::exists('rccomponents.partofurl')}">
			<property name="ss_expert_baseurl" value="${rccomponents.baseurl+'/'+rccomponents.partofurl+'/'+major.version+'.'+minor.version+'.'+release.version+'.'+build.version}"/>
		</if>
		<if test="${not property::exists('rccomponents.baseurl')}">
			<property	name="ss_expert_baseurl"	value="\\archer-kirill\SS\Clients\Win32\RCE\RCComponents\out\bin\dynamic_debug"/>
		</if>
		<!-- copy tamplate of bootstrapper -->
		<copy file="tools\setup.exe" tofile="${output.bin.dir}\${ss_expert_filename}"/>
		<!-- change bootstrapper -->
		<exec program="tools\MsiStuff.Exe" 
				commandline="${ss_expert_filename} -u &quot;${ss_expert_baseurl}&quot; -d SupportSpaceExpertSupportTools.msi -n &quot;SupportSpace Support Platform&quot; -o INSTALLUPD -v 200"
				workingdir="${output.bin.dir}"
				/>
		<!-- singin bootstrapper -->
		<if test="${environment::variable-exists('SS_PFX_PATH')}">
			<property name="ss_pfx_path" value="${environment::get-variable('SS_PFX_PATH')}" />
			<exec program="signtool" commandline="${'sign /t http://timestamp.verisign.com/scripts/timstamp.dll /f '+ss_pfx_path+'\SupportSpace.pfx  '+output.bin.dir+'\'+ss_expert_filename}" />
		</if>
		<if test="${not environment::variable-exists('SS_PFX_PATH')}">
			<exec program="signtool" commandline="sign /f .\..\..\etc\SupportSpace.pfx -p SupportSpace ${output.bin.dir}\${ss_expert_filename}" />
		</if>
		<!-- Copying files -->
		<mkdir dir="${install.dir}\install" />
		<copy todir="${install.dir}\install" overwrite="true" >
			<fileset basedir="${output.bin.dir}">
				<include name="*.msi" />
				<include name="*.cab" />
				<include name="${ss_expert_filename}"/>
			</fileset>
		</copy>
	</target>

	<!-- Building dependent projects -->
	<target name="build_dependent" >
		<nant target="${build.target}">
			<buildfiles>
			</buildfiles>
		</nant>
	</target>

	<!-- Building unit tests -->
	<target name="build_utests" />

	<!-- Building functional tests -->
	<target name="build_ftests" />

	<!-- Running unit and functional tests -->
	<target name="run_tests" depends="setup_environment" if="${not environment::variable-exists(test.exclude)}" >
		<property name="build.target" value="run_tests" />
		<call target="build_dependent" failonerror="${failontesterror}" />
		<setenv if="${not environment::variable-exists(test.bin.path)}" >
			<variable name="PATH" value="${install.dir}\bin;%PATH%" />
			<variable name="${test.bin.path}" value="1" />
		</setenv>
		<!-- INSERT TEST -->
		<setenv>
			<variable name="${test.exclude}" value="1" />
		</setenv>
	</target>




	<!-- Main targers -->

	<!-- Cleaning project -->
	<target name="clean" depends="clean_installed, clean_intermediate" >
		<nant target="clean">
			<buildfiles>
			</buildfiles>
		</nant>
	</target>

	<!-- Installing project -->
	<target name="install" depends="clean_installed, copy_public, copy_binaries" />

	<!-- Building project and tests -->
	<target name="build_all" depends="setup_environment" if="${not environment::variable-exists(project.exclude)}" >
		<call target="clean_installed" />
		<call target="clean_intermediate" />
		<call target="copy_public" />
		<property name="build.target" value="build_all" />
		<call target="build_dependent" />
		<call target="compile" />
		<call target="copy_binaries" />
		<setenv>
			<variable name="${project.exclude}" value="1" />
		</setenv>
		<call target="build_utests" />
		<call target="build_ftests" />
	</target>

	<!-- Building project -->
	<target name="build" depends="setup_environment" if="${not environment::variable-exists(project.exclude)}" >
		<call target="clean_installed" />
		<call target="clean_intermediate" />
		<call target="copy_public" />
		<property name="build.target" value="build" />
		<call target="build_dependent" />
		<call target="compile" />
		<call target="copy_binaries" />
		<setenv>
			<variable name="${project.exclude}" value="1" />
		</setenv>
	</target>

	<!-- Building project without dependent projects -->
	<target name="build_shallow" depends="clean_installed, clean_intermediate, copy_public, compile, copy_binaries" />

	<!-- Compiling project -->
	<target name="compile" depends="setup_environment">
		<setenv>
			<variable name="BUILDRCEFROMSCRIPT" value="1" />
		</setenv>
		<msbuild project = "src\RCComponents.wixproj" verbosity="Detailed" />
	</target>



	<!-- Targers for Visual Studio -->
	<target name="prebuild" if="${not environment::variable-exists('BUILDRCEFROMSCRIPT')}">
		<setenv>
			<variable name="BUILDRCEFROMVS" value="1" />
		</setenv>
		<call target="clean_installed" />
		<call target="copy_public" />
	</target>
	<target name="postbuild" if="${not environment::variable-exists('BUILDRCEFROMSCRIPT')}">
		<call target="copy_binaries" />
	</target>

</project>
