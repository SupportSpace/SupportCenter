<?xml version="1.0" ?>

<project name="NWL" default="build_all">


  <!-- Additional targers -->

  <!-- Setup environment variables -->
  <target name="setup_environment">
    <property name="roots.dir" value="${environment::get-variable('ROOTS')}" />
    <if test="${property::exists('configuration')}">
      <setenv>
        <variable name="CONFIGURATION" value="${configuration}" />
      </setenv>
    </if>
    <if test="${not property::exists('configuration')}">
      <property name="configuration" value="${environment::get-variable('CONFIGURATION')}" />
    </if>
    <property name="install.dir" value="${roots.dir}\console_${configuration}" />
    <property name="public.dir" value="public" />
    <property name="output.bin.dir" value="out\bin\${configuration}" />
    <property name="output.obj.dir" value="out\obj\${configuration}" />
    <property name="project.name" value="NWL" />
    <property name="project.exclude" value="NWL_EXCLUDE_${configuration}" />
    <property name="test.exclude" value="NWL_TEST_EXCLUDE_${configuration}" />
    <property name="test.bin.path" value="TESTBINPATH_${configuration}" />
    <if test="${not property::exists('failontesterror')}">
      <property name="failontesterror" value="true" />
    </if>
    <if test="${not environment::variable-exists('SIGNTOOLPATH')}" >
      <property name="vscomm" value="${environment::get-variable('VS80COMNTOOLS')}" />
      <property name="vscomm.bin" value="${vscomm}\bin" />
      <setenv>
        <variable name="PATH" value="${vscomm.bin};%PATH%" />
        <variable name="SIGNTOOLPATH" value="1" />
      </setenv>
    </if>
  </target>

  <!-- Removing public files and binary files from roots direcory -->
  <target name="clean_installed" depends="setup_environment">
    <!-- Removing lib, pdb, dll files from roots -->
    <delete file="${install.dir}\lib\nwl.lib" if="${file::exists(install.dir+'\lib\nwl.lib')}" />
    <delete file="${install.dir}\bin\nwl.dll" if="${file::exists(install.dir+'\bin\nwl.dll')}" />
    <delete file="${install.dir}\bin\nwl.pdb" if="${file::exists(install.dir+'\bin\nwl.pdb')}" />
    <!--Removing include files from roots -->
    <if test="${not environment::variable-exists('BUILDRCEFROMVS')}">
      <delete dir="${install.dir}\include\${project.name}" if="${directory::exists(install.dir+'\include\'+project.name)}" />
    </if>
  </target>

  <!-- Removing intermediate files from output direcory -->
  <target name="clean_intermediate" depends="setup_environment">
    <delete dir="${output.bin.dir}" if="${directory::exists(output.bin.dir)}" />
    <delete dir="${output.obj.dir}" if="${directory::exists(output.obj.dir)}" />
  </target>

  <!-- Copying public files to roots directory -->
  <target name="copy_public" depends="setup_environment">
    <mkdir dir="${install.dir}\include\${project.name}" />
    <copy todir="${install.dir}\include\${project.name}" overwrite="true">
      <fileset basedir="${public.dir}">
        <include name="**\*.*" />
      </fileset>
    </copy>
  </target>

  <!-- Copying binary files from output directory to roots directory -->
  <target name="copy_binaries" depends="setup_environment">
    <!-- Signing files -->
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${output.bin.dir}\*.dll" />
        </items>
      </in>
      <do>
	<if test="${environment::variable-exists('SS_PFX_PATH')}">
		<property name="ss_pfx_path" value="${environment::get-variable('SS_PFX_PATH')}" />
		<exec program="signtool" commandline="${'sign /t http://timestamp.verisign.com/scripts/timstamp.dll /f '+ss_pfx_path+'\SupportSpace.pfx '+filename}" />
	</if>
	<if test="${not environment::variable-exists('SS_PFX_PATH')}">
		<exec program="signtool" commandline="sign /f .\..\..\etc\SupportSpace.pfx -p SupportSpace ${filename}" />
	</if>
      </do>
    </foreach>
    <!-- Copying lib files -->
    <mkdir dir="${install.dir}\lib" />
    <copy todir="${install.dir}\lib" overwrite="true">
      <fileset basedir="${output.bin.dir}">
        <include name="*.lib" />
      </fileset>
    </copy>
    <!-- Copying dll, pdb files -->
    <mkdir dir="${install.dir}\bin" />
    <copy todir="${install.dir}\bin" overwrite="true">
      <fileset basedir="${output.bin.dir}">
        <include name="*.dll" />
        <include name="*.pdb" />
      </fileset>
    </copy>
  </target>

  <!-- Building dependent projects -->
  <target name="build_dependent" >
    <nant target="${build.target}">
      <buildfiles>
        <include name="..\..\Shared\boost\boost.build"/>
        <include name="..\..\Shared\AidLib\AidLib.build"/>
        <include name="..\..\Shared\zlib\zlib.build" />
        <include name="udt\udt.build" />
        <include name="miniUPnP\miniUPnP.build" />
        <include name="..\..\Shared\gnutls-1.5.1\gnutls.build" />
        <include name="..\..\Shared\sdk\sdk.build"/>
      </buildfiles>
    </nant>
  </target>

  <!-- Building unit tests -->
  <target name="build_utests" >
    <nant target="${build.target}">
      <buildfiles>
        <include name="utest\UTestNWL.build"/>
      </buildfiles>
    </nant>
  </target>

  <!-- Building functional tests -->
  <target name="build_ftests">
    <nant target="${build.target}">
      <buildfiles>
        <include name="ftest\FTestNWL.build"/>
      </buildfiles>
    </nant>
  </target>

  <!-- Running unit and functional tests -->
  <target name="run_tests" depends="setup_environment" if="${not environment::variable-exists(test.exclude)}" >
    <property name="build.target" value="run_tests" />
    <call target="build_dependent" failonerror="${failontesterror}" />
    <setenv if="${not environment::variable-exists(test.bin.path)}" >
      <variable name="PATH" value="${install.dir}\bin;%PATH%" />
      <variable name="${test.bin.path}" value="1" />
    </setenv>

  <exec program="UTestNWL.exe" basedir="${install.dir}\utest\NWL" workingdir="${install.dir}\bin" />

  <setenv>
      <variable name="${test.exclude}" value="1" />
    </setenv>
  </target>



  <!-- Main targers -->

  <!-- Cleaning project -->
  <target name="clean" depends="clean_installed, clean_intermediate" >
      <nant target="clean">
        <buildfiles>
          <include name="udt\udt.build" />
	  <include name="utest\UTestNWL.build" />
        </buildfiles>
        </nant>
  </target>

  <!-- Installing project -->
  <target name="install" depends="clean_installed, copy_public, copy_binaries" />

  <!-- Building project and tests -->
  <target name="build_all" depends="setup_environment" if="${not environment::variable-exists(project.exclude)}" >
    <call target="clean_installed" />
    <call target="copy_public" />
    <property name="build.target" value="build_all" />
    <call target="build_dependent" />
    <call target="compile" />
    <call target="copy_binaries" />
    <setenv>
      <variable name="${project.exclude}" value="1" />
    </setenv>
    <call target="build_utests" />
    <call target="build_ftests" />
  </target>

  <!-- Building project -->
  <target name="build" depends="setup_environment" if="${not environment::variable-exists(project.exclude)}" >
    <call target="clean_installed" />
    <call target="copy_public" />
    <property name="build.target" value="build" />
    <call target="build_dependent" />
    <call target="compile" />
    <call target="copy_binaries" />
    <setenv>
      <variable name="${project.exclude}" value="1" />
    </setenv>
  </target>

  <!-- Building project without dependent projects -->
  <target name="build_shallow" depends="clean_installed, copy_public, compile, copy_binaries" />

  <!-- Compiling project -->
  <target name="compile" depends="setup_environment">
    <setenv>
      <variable name="BUILDRCEFROMSCRIPT" value="1" />
    </setenv>
    <msbuild project = "src\NetworkLayer.vcproj" verbosity="Detailed" />
  </target>



  <!-- Targers for Visual Studio -->
  <target name="prebuild" if="${not environment::variable-exists('BUILDRCEFROMSCRIPT')}">
    <setenv>
      <variable name="BUILDRCEFROMVS" value="1" />
    </setenv>
    <call target="clean_installed" />
    <call target="copy_public" />
  </target>
  <target name="postbuild" if="${not environment::variable-exists('BUILDRCEFROMSCRIPT')}">
    <call target="copy_binaries" />
  </target>

</project>
